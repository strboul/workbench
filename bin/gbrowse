#!/usr/bin/env python

# Browse git remote repository on a browser
#
# Usage:
#   gbrowse  # prints remote url in the current directory
#   gbrowse ~/path  # prints remote url in the specified directory
#   gbrowse --open  # opens the remote url
#   gbrowse --open=chrome # opens with chrome
#
# Details:
#   The following protocols are covered:
#   - "git@github.com:org/repo.git"
#   - "ssh://git@gitlab.dev.internal.org:30022/org/repo.git"
#

import argparse
import subprocess
import sys
import urllib.parse

_DEFAULT_BROWSER = "firefox"


def parse_args():
    parser = argparse.ArgumentParser(allow_abbrev=False)
    parser.add_argument("path", nargs="?")
    parser.add_argument("--open", nargs="?", const=_DEFAULT_BROWSER)
    args = parser.parse_args()
    return args


def git_command(path, cmd_args):
    cmd = ["git"]
    if path is not None:
        cmd.extend(["-C", path])
    cmd.extend(cmd_args)
    process = subprocess.Popen(cmd, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
    stdout, stderr = process.communicate()
    exit_code = process.wait()
    out = (exit_code, stdout, stderr)
    return out


def is_git_repository(path):
    exit_code, _, _ = git_command(path, ["rev-parse"])
    return exit_code == 0


def get_git_origin_url(path):
    _, stdout, _ = git_command(path, ["config", "--get", "remote.origin.url"])
    return stdout.decode("utf-8")


def get_browser_name(name):
    browsers = {
        "chrome": "google-chrome-stable",
        "firefox": "firefox",
    }
    browser = browsers.get(name)
    if browser is None:
        raise ValueError("unknown browser")
    return browser


def open_browser(browser, url):
    cmd = [browser, url]
    print(f"opened url on '{browser}'")
    subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)


def transform_ssh_to_https(path):
    split_at = path.split("@")
    if len(split_at) > 1:
        path = split_at[1]
    if path.endswith(".git"):
        path = path[: len(path) - 4]
    split_colon = path.split(":")
    if len(split_colon) > 1:
        path = "/".join(split_colon)
    if not path.startswith("https://"):
        path = "https://" + path
    return path


def transform_remote_url(url):
    parsed = urllib.parse.urlparse(url)
    path = parsed.path
    if parsed.scheme == "ssh":
        split_colon = parsed.netloc.split(":")
        if len(split_colon) > 1:
            ssh = split_colon[0]
            path = ssh + parsed.path
    remote_url = transform_ssh_to_https(path)
    print(remote_url)
    return remote_url


def main():
    args = parse_args()
    is_git = is_git_repository(args.path)
    if not is_git:
        print("not a git repository")
        sys.exit(1)

    origin_url = get_git_origin_url(args.path)
    remote_url = transform_remote_url(origin_url)

    if args.open is not None:
        browser = get_browser_name(args.open)
        open_browser(browser, remote_url)


if __name__ == "__main__":
    main()
