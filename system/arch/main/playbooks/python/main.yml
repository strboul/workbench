---
# Manage Python with pyenv
# https://github.com/pyenv/pyenv/
#
- name: Setup Python
  tags: python
  hosts: all
  tasks:
    - name: Ensure system Python is installed
      ansible.builtin.stat:
        path: /usr/bin/python
      register: system_python

    - name: Fail if system python not found
      ansible.builtin.fail:
        msg: "System Python not found!"
      when: not system_python.stat.exists

    - name: Ensure pip is ready
      ansible.builtin.command: /usr/bin/python -m ensurepip --upgrade
      register: system_python_pip_ensure
      changed_when: system_python_pip_ensure.rc != 0

    - name: Install pyenv
      community.general.pacman: name="{{ config.packages.pacman.pyenv }}" state=present
      become: true

    - name: Add pyenv to zsh profile
      ansible.builtin.blockinfile:
        path: "{{ ansible_env.HOME }}/.zshenv"
        marker: "# {mark} ANSIBLE MANAGED BLOCK: pyenv"
        block: |
          typeset -U path PATH
          path=($HOME/.pyenv/bin $path)
          export PATH
          eval "$(pyenv init --path)"
          eval "$(pyenv init -)"
        mode: "0644"
        create: true
        state: present

    - name: Install pyenv versions
      ansible.builtin.command:
        argv:
          - pyenv
          - install
          - -v
          - "{{ item }}"
          - --skip-existing
        creates: "{{ ansible_env.HOME }}/.pyenv/versions/{{ item }}"
      loop:
        - "2.7.18"  # last release of Python 2
        - "3.8-dev"
        - "3.12-dev"
      register: pyenv_install
      notify: Set default pyenv version

    - name: Install some Python packages
      ansible.builtin.pip:
        name:
          - virtualenv
          - pylint  # https://github.com/PyCQA/pylint
          - black  # https://github.com/psf/black
          - requests  # https://github.com/psf/requests
        state: present
      environment:
        PIP_REQUIRE_VIRTUALENV: "false"

  handlers:
    # Set the highest Python version as global initially.
    - name: Set default pyenv version
      ansible.builtin.command: |
        set -o pipefail
        version="$(pyenv versions |
          sed '/.*system.*/d' |
          sort -r --version-sort |
          head -n 1 |
          grep -Eo '[0-9]\.[0-9]+(\.[0-9]+|\-dev)?' |
          xargs)"
        pyenv global "$version"
      register: python_pyenv_set_default
      changed_when: python_pyenv_set_default.rc != 0
