; Cheatsheet
;
; The syntax defined at:
; https://github.com/denisidoro/navi/blob/master/docs/cheatsheet_syntax.md
;
; Rules:
; - Create a new entry with the command name followed by the tags:
;   `% name [tag1, tag2]`.
;
; - The variables are defined at the end of the entry. Use `-` hyphen to
;   separate the variables, e.g. `my-var`.
;
; - Try to use synonymous words from commands on the description, e.g. if a
;   command has the word 'delete', use 'remove' in the description. If neither
;   exists, but the command removes something, use both in the description.
;
; - Don't add comma (,) or hyphen (-) to the names because the fuzzy finder
;   doesn't work.

; ----------------------------------------------------------------------------
% git [git]

# get author summary
git shortlog -sne

# get logs from author
git log --author="<name>"

# set local user name
git config --local user.name "<name>"

# set local email
git config --local user.email "<email>"

# remove remote-tracking branches
git fetch --prune

# squash merge branch
git merge --squash <uncheckout-branch>

# rename current branch
git branch -m <newname>

# rebase branch with master
git rebase origin master

# abort rebase
git rebase --abort

# rename branch
git branch -m <oldname> <newname>

# list remote origins
git remote -v

# set remote address
git remote add <ssh_or_https>

# list last n commits
git log -n <n>

# search in all of the commit messages of project
git log --grep "<query>"

# history of file
git log -p <filename>

# search a query in the git logs
git log -p -G <query>

# search in history
git grep '<query>' $(git rev-list --all)

# search a query in a file/folder with history
git grep '<query>' "$(git rev-list --all -- <file-or-folder>)" -- <file-or-folder>

# amend and don't edit the commit message
git commit --amend --no-edit

# change the SHA of the last commit
git commit --allow-empty --amend --no-edit

# create a fixup commit
git commit --fixup <commit_sha_current_branch>

# by skipping commit hooks
git commit --no-verify

# commit with a date ISO 8601 format
git commit --date="YYYY-MM-DDTHH:MM:SS"

# reset head commit
git reset HEAD~

# get a stash diff
git stash show -p stash@{0}

# list tags by creation date (descending)
git tag --sort=-creatordate

# list ignored files
git ls-files --ignored --exclude-standard --others

# change remote url
git remote set-url origin git@example.com:user/repo.git

# create patch files from the last n commits
git format-patch -<n> HEAD

# apply multiple patches
git apply *.patch

# add submodule
git submodule add <repository> <path>

# update submodule
git submodule update

# update submodules and init
git submodule update --init

# pull all submodules
git submodule foreach git pull origin master

# update all submodules
git submodule update --init --recursive

# create zip archive (respecting gitignore)
git archive --format=zip --output <filename>.zip master

# change git ssh command
GIT_SSH_COMMAND='ssh -vvv' git fetch

$ name: git log --format='%an' | sort -u
$ email: git log --format='%ae' | sort -u
$ uncheckout-branch: git branch --list | awk '{ if ($1 != "*") { print $1 } }'
$ file-or-folder: find * -type f -o -type d
$ commit_sha_current_branch: git log --format="%C(auto) %H %s" --no-merges master.. | fzf | awk '{ print $1 }'

; ----------------------------------------------------------------------------
% ssh [security]

# authorise ssh pub key in a remote machine.
ssh-copy-id -i <public-key> user@<hostname-or-ip>

# jump through multiple hosts
ssh -J user@host1,user@host2 user@host3

# restart ssh agent
eval "$(ssh-agent -s)"

# create ssh keypair
ssh-keygen -t ed25519 -C "<comment>"

# reverse port forwarding
ssh -L 8001:127.0.0.1:8001 user@host

# keyscan by type of domain or IP
ssh-keyscan -t ed25519 github.com

$ public-key: find ~/.ssh -type f -name '*.pub'

; ----------------------------------------------------------------------------
% scp [security]

# secure copy a directory (-r: recursive)
scp -r <local_dir> user@host:<remote_dir>

# copy with jump hosts
scp -J juser@jhost <file1> <file2> user@host:/

; ----------------------------------------------------------------------------
% gpg [security]

# list public keys
gpg --list-keys

# generate key with the defaults
gpg --gen-key

# list public keys long format with fingerprints
gpg --list-keys --keyid-format=LONG

# search public keys by email in keyservers
gpg --search-keys <email>

# get fingerprint of key by email
gpg --fingerprint <email>

# get fingerprint of key file (without importing it into the keyring first)
gpg --show-keys --with-fingerprint <filename>

# list signatures
gpg --list-signatures <fingerprint>

# list private keys
gpg --list-secret-keys --keyid-format=LONG

# import a public/private key from a file
gpg --import <key-file>

# export armor of a public key
gpg --armor --export <fingerprint>

# remove public key
gpg --delete-key <fingerprint>

# remove private key
gpg --delete-secret-key <fingerprint>

; multiple recipients with `--recipient ...`
# encrypt file
gpg --encrypt --armor --recipient <email> --output <output_filename_gpg> <input_filename>

# decrypt file
gpg --decrypt --output <output_filename> <input_filename_gpg>

# clearsign file
gpg --clearsign <input_filename>

# verify a sign
gpg --verify <filename>

$ fingerprint: gpg-list-public-keys | fzf | awk '{ print $1 }'
$ email: gpg-list-public-keys | fzf | perl -pe 's/^.*\<(.*)\>$/\1/g'

; ----------------------------------------------------------------------------
% openssl [security]

# get certificate details
openssl x509 -text -noout -in <crt-file>

; ----------------------------------------------------------------------------
% nmap [network]

# scan all open ports in an address
nmap 192.168.1.1

; -sP: uses ping
# get all valid IP addresses in network (255 netmask)
nmap -sP 192.168.1.0/24

# find dhcp addresses
nmap --script broadcast-dhcp-discover -e <interface>

$ interface: ip -o a show | awk '{ if ($3 == "inet") { print $2; } }'

; ----------------------------------------------------------------------------
% ip [network]

# list routing table
ip route

# get ip route
ip route get 1 | awk '{ print $7 }'

# route an address via interface
ip route add <address> dev <interface>

; ----------------------------------------------------------------------------
% nmcli [network]

# show general status
nmcli general status

# show device status
nmcli dev status

# list all known connections
nmcli connection show

# list wifi devices
nmcli dev wifi list

# create a new connection
nmcli dev wifi con "<ssid>"

# up a connection (ask password)
nmcli con up --ask "<ssid>"

# print password of the current wifi device
nmcli dev wifi show-password

# print password of a known network
nmcli -show-secrets -get-values "802-11-wireless-security.psk" connection show "<known-ssid>"

$ known-ssid: nmcli -g name connection

; ----------------------------------------------------------------------------
% iwctl [network]

# list devices
iwctl station list

# list available networks on a device
iwctl station wlan0 get-networks

# connect to a network
iwctl station wlan0 connect <ssid>

; ----------------------------------------------------------------------------
% tcpdump [network]

# list connections
tcpdump -l

# get packets from interface
tcpdump -nn -i eth0

; -nn: don't resolve hostnames or ports
; -vvv: verbose
; -X: show packet contents
# get packet details from interface
tcpdump -nn -vvv -X -i eth0

# write packagets to file
tcpdump -i eth0 -w <file>.pcap

# monitor outgoing connections except ssh
tcpdump -i eth0 port not 22 and src <source-ip>

; ----------------------------------------------------------------------------
% socat [network]

; fork: handles connection in a child process, make the parent process attempt
; to handle more connections.
; reuseaddr: allows immediate restart of the server process.
# listen at a port
socat - TCP4-LISTEN:<port>,fork,reuseaddr

# send a message to a port
echo "hello" | socat TCP4:<address>:<port> -

# send file contents as stream
echo "$(<<file>)" | socat TCP4:<address>:<port> -

$ address: echo "192.168.1.1" --- --fzf-overrides '--no-select-1'
$ port: echo "3333" --- --fzf-overrides '--no-select-1'

; ----------------------------------------------------------------------------
% netstat [network]

# list network interfaces
netstat -ie

; ----------------------------------------------------------------------------
% qpdf [pdf]

; warnings: scans with different resolutions can be problematic.
# concatenate/merge pdf files
qpdf --empty --pages input-*.pdf -- output.pdf

; ----------------------------------------------------------------------------
% convert [imagemagick, jpg, pdf]

# convert jpg to pdf
convert picture-*.jpg out.pdf

# resize an image by percent (source and destination)
convert -resize 50% <image-files> dest.png

# resize an image by size (source and destination)
convert -resize 1024X768 <image-files> dest.jpg

$ image-files: find * -type f -regex '.*\.\(png\|jpg\|jpeg\)'

; ----------------------------------------------------------------------------
% lsof [file]

# show open files (-w don't show warnings)
lsof -w

# list a specific port
lsof -i:<port>

# determine which proceses modify a file or directory
lsof <file_or_dir>

; ----------------------------------------------------------------------------
% du [disk]

# disk usage of current directory/folder
du -sh .

# disk usage of files and folders of current directory/folder
du -sh *

; ----------------------------------------------------------------------------
% df [disk]

# display free disk space
df -h

; ----------------------------------------------------------------------------
% lsblk [disk]

# list block devices with filesystems
lsblk --fs

; ----------------------------------------------------------------------------
% blkid [disk]

# locate/print block device attributes
blkid

; ----------------------------------------------------------------------------
% kill [process]

# kill all processes of that program
killall -9 <name_command>

# kill by process id
kill -9 <pid>

; ----------------------------------------------------------------------------
% auditctl [process]

# list the rules
auditctl -l

# get key reports today
aureport -ts today -k

# get summary of key reports since boot
aureport -ts boot -k

# get summary of key reports today
aureport -ts today -k --summary

; ausearch
; -i: convert numeric entities e.g. hex, uid etc. into readable text.
# get logs by key
ausearch -i -k <key>

# get logs on file
ausearch -i -f <file>

; ----------------------------------------------------------------------------
% mount [linux]

# mount devices
mount /dev/sda /mnt/<dir>

# list mounts and filter by type
mount -l -t ext4

# unmount
umount <dir>

; ----------------------------------------------------------------------------
% getconf [linux]

# 32 bits or 64 bits?
getconf LONG_BIT

; ----------------------------------------------------------------------------
% ln, unlink [linux]

# create symlink
ln -s <destination> <source>

# update symlink
ln -sfn <destination> <source>

# remove symlink
unlink <file>

; ----------------------------------------------------------------------------
% free [linux]

# display memory and swap info in the system
free -m

; ----------------------------------------------------------------------------
% ss [network, socket, process]

; -a: all, both listening and non-listening, tcp established
; -n: don't resolve service names, show numbers
; -t: show threads using socket
; -l: Display only listening sockets
; -p: show process
# list all open sockets
ss -antlp

# show ipv4 connections (-r: resolve, -p: show process)
ss -4 -r -p

# list summary of all socket connections
ss -s

# filter connections by port number
ss -at -p '( dport = :22 or sport = :22 )'

; ----------------------------------------------------------------------------
% dig [network, dns]

# query specific nameserver
dig 127.0.0.1 @1.1.1.1

# get nameserver addresses
dig +short ns example.com

# mx: 'Mail eXchange' records
dig +short mx example.com

# soa: 'Start Of Authority' records
dig +short soa example.com

# list all records
dig +noall +answer +multiline example.com any

; ----------------------------------------------------------------------------
% nslookup [network, dns]

# reverse DNS lookup
nslookup 127.0.0.1

; ----------------------------------------------------------------------------
% ip [network]

# list network devices
ip link

# list route table
ip route

# create dummy virtual ethernet interface
ip link add xennet0 type dummy; ip a change dev xennet0 93.184.216.34

# remove dummy virtual ethernet interface
ip link delete xennet0 type dummy

; ----------------------------------------------------------------------------
% traceroute, tracepath [network]

# traceroute to a host (uses icmp)
traceroute <domain_tld>

# tracepath to a host (uses UDP and MTU)
tracepath <domain_tld>

; ----------------------------------------------------------------------------
% chattr [file]

# change file attribute (+i: make immutable)
chattr +i <file>

; ----------------------------------------------------------------------------
% scanimage [printer, scanner]

# scan an image
scanimage --progress --resolution=150 --format=pdf --output-file "$(date +'%Y-%m-%dT%H:%M:%S')".pdf

# list devices
scanimage -L

; ----------------------------------------------------------------------------
% lpstat [printer, cups]

# get printer info
lpstat -a

# get jobs status
lpstat -t

; ----------------------------------------------------------------------------
% lp [printer, cups]

# print the echoed string
echo 'IPP everywhere' | lp

; ----------------------------------------------------------------------------
% nc [network, netcat]

# check if a port is open
nc -z -v 127.0.0.1 <port>

; -l: listen mode
; -vv: twice more verbose
; -n: numeric-only IP addresses, no DNS
; -p: local port number
# listen on a port
nc -lvvnp <port>

$ port: echo "3333" --- --fzf-overrides '--no-select-1'

; ----------------------------------------------------------------------------
% telnet [network]

; prefer netcat over telnet!
# ping a port
telnet 127.0.0.1 <port>

; ----------------------------------------------------------------------------
% systemd [systemd]

# inspect users, groups
userdbctl

; ----------------------------------------------------------------------------
% journalctl [systemd]

# follow log messages.
journalctl -f

# listen logs of an executable.
journalctl -f /usr/bin/<program>

# show log disk usage
journalctl --disk-usage

# get logs since the current boot.
journalctl -b

# get logs from the previous boot.
journalctl -b-1

# list boots from the current year.
journalctl --list-boots

# show messages since
journalctl --since "1 day ago"

# show only error, critical, alert priority messages.
journalctl -p err..alert

# get logs since the boot and of a unit.
journalctl -b -u <service-file>

$ service-file: systemctl list-unit-files | grep enabled | awk '{ print $1 }'

; ----------------------------------------------------------------------------
% resolvectl [systemd]

# resolve domain names
resolvectl --cache=false query strboul.com

; ----------------------------------------------------------------------------
% firewalld [systemd]

# open tcp port (temporarily)
firewall-cmd --add-port=8000/tcp

# open tcp port (permanently)
firewall-cmd --permanent --add-port=8000/tcp

# close tcp port (permanently)
firewall-cmd --permanently --remove-port=8000/tcp

# list allowed ports
firewall-cmd --list-ports

# list active zones
firewall-cmd --get-active-zones

# list running services
firewall-cmd --list-services

# list everything added or enabled
firewall-cmd --list-all

# reload firewalld
firewall-cmd --reload

; ----------------------------------------------------------------------------
% pwgen

# create a random password with length of 16 (with capital letter and numerals)
pwgen -nc 16 -1

; ----------------------------------------------------------------------------
% find

# find files ending with an extension.
find * -type f -name '*.<extension>'

# find folder/directory by name.
find * -type d -name '<name>'

; useful for logs.
# find any file modified in the last 1 min
find * -mmin 1

; ----------------------------------------------------------------------------
% systemctl [systemd]

# get status of a service
systemctl status <service>

# list running user services
systemctl --user list-units --state=running

# list user timers
systemctl --user list-timers

# stop a user timer
systemctl --user <user-timer-unit>

# show failed services
systemctl --failed

# edit service file
sudo EDITOR=vim systemctl edit <service>

$ service: systemctl list-units --type=service --no-pager --quiet | awk '{ print $1 }'
$ user-timer-unit: systemctl --user list-timers --no-pager --quiet | perl -pe 's/^.*(\s+)(.*)(?<=\.timer).*$/\2/g'

; ----------------------------------------------------------------------------
% docker [docker]

# tag an image
docker tag <image-id> <new-tag>

# delete an image
docker rmi <image_id>

# clean none/dangling images
docker rmi $(docker images --filter "dangling=true" -q --no-trunc)

# list the networks
docker network ls

# list the running containers
docker ps

# delete all running and stopped containers
docker rm -f $(docker ps -aq)

# inspect a container or image
docker inspect <container-or-image-sha>

# copy from host to container
docker cp foo.txt container_id:/foo.txt

# copy from container to host
docker cp container_id:/foo.txt foo.txt

# get docker system info
docker system info

# get docker system disk usage
docker system df

# prune unused images, containers, networks, volumes
docker system prune

; ----------------------------------------------------------------------------
% docker-compose [docker]

# start containers detached, force recreated
docker compose up --detach --force-recreate

# stop and remove containers, networks
docker compose down

; ----------------------------------------------------------------------------
% fdisk [disk]

# list disk partitions
fdisk -l

; ----------------------------------------------------------------------------
% man [unix]

; from `man man`:
;
; Section commands
;
;   1   Executable programs or shell commands
;   2   System calls (functions provided by the kernel)
;   3   Library calls (functions within program libraries)
;   4   Special files (usually found in /dev)
;   5   File formats and conventions, e.g. /etc/passwd
;   6   Games
;   7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7), man-pages(7)
;   8   System administration commands (usually only for root)
;   9   Kernel routines [Non standard]
;

# get manual page of a command
man printf

# get manual page of specific section of a command
man 3 printf

# list sections of a command
man -k '^printf'

; ----------------------------------------------------------------------------
% pacman [arch, linux]

# check updates
checkupdates

# list cache packages
ls -l /var/cache/pacman/pkg | grep '<query>'

# list all foreign packages (AUR or manually installed)
pacman -Qm

# search packages by regex query
pacman -Qs <query>

# get package information
pacman -Qi <installed-packages>

# get files provided by package
pacman -Ql <installed-packages>

# query file is owned by which package
pacman -Qo <file>

# install from file (e.g. cache)
pacman -U <cache-file>

# clear all unused cache
pacman -Sc

# completely (with dependencies) remove a package
pacman -Rcns <installed-packages>

$ cache-file: find /var/cache/pacman/pkg -type f -name '*.zst'
$ installed-packages: pacman -Qq

; ----------------------------------------------------------------------------
% dmesg [linux]

# get usb device names
dmesg -T | grep 'USB'

; ----------------------------------------------------------------------------
% id [linux]

# get user name
id -un

; ----------------------------------------------------------------------------
% chmod, chown, chgrp [linux]

# change file permissions with octal
chmod 0600 <filename>

# change user ownership of a file
chown <new-user> <filename>

# change group ownership of a file
chgrp <new-group> <filename>

; ----------------------------------------------------------------------------
% virsh [virt, libvirt]

# list of VMs
virsh list --all

# start VM
virsh start <vm_name>

# reboot VM
virsh reboot <vm_name>

# shutdown VM
virsh shutdown <vm_name>

# force stop
virsh destroy <vm_name>

# remove vm
virsh undefine <vm_name>

# console access of a running VM
virsh console <vm_name>

# list networks
virsh net-list

# start network
virsh net-start <network_name>

# show dhcp assigned IP addresses
virsh net-dhcp-leases <network_name>

# clone VM and create storage image
virt-clone -o <vm_name> -n <new_vm_name> -f /var/lib/libvirt/images/<new_vm>.qcow2

# delete/remove the attached storage file
rm -f "$(virsh dumpxml --domain <vm_name> | grep -oP "source file='\K[^']*")"

; ----------------------------------------------------------------------------
% shred [linux]

# safe delete/remove a file by overwriting it multiple times
shred -u <file>

; ----------------------------------------------------------------------------
% useradd, usermod, gpasswd [linux]

# list user groups.
groups

# list all groups.
getent group | cut -d: -f1

# add a new user with home directory and password
useradd --create-home --shell /usr/bin/zsh <username> && passwd <username>

# delete user and its home directory
userdel -rf <username>

# add user to sudoers group
usermod -aG wheel <user>

# add user to an existing group
usermod -aG <group> <user>

# remove user from group
gpasswd -d <group> <user>

# delete group
groupdel <group>

# change primary group of user
usermod -g primarygroupname username

$ user: getent passwd | cut -d: -f1
$ group: getent group | cut -d: -f1

; ----------------------------------------------------------------------------
% curl [network]

# send a get http request
curl <url>

# send a http request with a custom header and json body
curl -X <method> <url> -H '<headername>: <headervalue>' -d '<json>'

# send a get http request and follow redirects
curl -L <url>

$ method: echo -e 'GET\nPOST\nPUT\nDELETE\nPATCH'

; ----------------------------------------------------------------------------
% strace [linux]

# trace a command
strace ls

# trace a command and any newly created child process
strace -f ls

# trace a process and write to a file.
strace -f -p <pid> -e trace=write -o strace_pid_<pid>.capture

$ pid: ps a | tail -n +2 | fzf | awk '{ print $1 }'

; ----------------------------------------------------------------------------
% bash [linux]

# for loop over the files
for filename in *; do echo "$filename"; done

# ternary string comparison
[[ "str1" == "str2" ]] && echo "equal" || echo "not equal"

# check if a string contains a substring
if [[ "Arch Linux" =~ .*Linux.* ]]; then; echo "it contains"; fi

# check if a string is empty
if [[ -z '' ]]; then echo "it is empty"; fi

# check if a string is not empty
if [[ -n 'foo' ]]; then echo "it is not empty"; fi

; ----------------------------------------------------------------------------
% uname [linux]

# print system information
uname -a

; ----------------------------------------------------------------------------
% psql [database]

# send queries from the command line
psql postgresql://postgres:secret@127.0.0.1:5432/db -c '''
SELECT * FROM alias;
'''

; ----------------------------------------------------------------------------
% wget [linux]

# download and save a file with output
wget <link> -O <output_file>

; ----------------------------------------------------------------------------
% fwupdmgr [linux]

# download new metadata from remote server
fwupdmgr refresh

# update devices to the latest firmware version
fwupdmgr update

; ----------------------------------------------------------------------------
% btrfs [linux]

# list subvolumes
btrfs subvol list /

# create snapshot (-r: readonly)
btrfs subvol snapshot -r /home "/.snapshots/home-$(date +%FT%T)"

# delete snapshot
btrfs subvol delete @snapshots/<snapshot>

# show subvol details of snapshot
btrfs subvol show /.snapshots/<folder_name>

; # Restore snapshot
; TODO

; ----------------------------------------------------------------------------
% zfs, zpool [linux]

# list zfs pools
zpool list

# get pool status
zpool status

# lists zfs file systems
zfs list

# set/change quota
zfs set refquota=1G <name>

; ----------------------------------------------------------------------------
% attr [linux]

# list file attributes
lsattr <file>

# make file immutable/append only
chattr +ia <file>

# make file mutable/non-append only
chattr -ia <file>

; ----------------------------------------------------------------------------
% zip [linux]

# archive files
zip archive.zip file1 file2

# add file or folders to the zip archive
zip -r archive.zip file_or_folder

; ----------------------------------------------------------------------------
% hexdump [linux]

# display text with hexadecimal
echo "text" | hexdump -Cc

; ----------------------------------------------------------------------------
% rg [ripgrep]

# search in a single file
rg <query> <file>

# search in dir recursively
rg <query> <folder>/

# search literally i.e. without regex
rg -F '<query>'

# search files not containing the query
rg --files-without-match <query>

# search pattern but ignore files
rg <query> -g '!*<pattern>'

; ----------------------------------------------------------------------------
% python [python]

# pip install requirements
python -m pip install -r requirements.txt

# pip freeze requirements
python -m pip freeze > requirements.txt

# Create a single http server on directory
python -m http.server <port> --bind <address>

# Convert unix time to datetime
python -c "import datetime; print(datetime.datetime.fromtimestamp(0))"

$ port: echo "3333" --- --fzf-overrides '--no-select-1'
$ address: echo "127.0.0.1" --- --fzf-overrides '--no-select-1'

; ----------------------------------------------------------------------------
% pyenv [python]

# list pyenv versions
pyenv versions

# install python version
pyenv install <version>

# set global version
pyenv global <version>

# set local version (creates .python-version file)
pyenv local <version>

# temporarily set version
pyenv shell <version>

; ----------------------------------------------------------------------------
% xdg [linux]

# find xdg-mime of a file.
xdg-mime query filetype <file>

# find default application of a xdg-mime.
xdg-mime query default <mime>

# get list of xdg desktop files.
ls /usr/share/applications

; ----------------------------------------------------------------------------
% iptables [linux]

# log incoming packets
iptables -t raw -A PREROUTING --destination 1.1.1.1 -j LOG --log-prefix='[iptables-raw-debug] '

# log outgoing packets
iptables -t raw -A OUTPUT --destination 1.1.1.1 -j LOG --log-prefix='[iptables-raw-debug] '

# list the raw table
iptables -t raw -L -v -n --line-numbers

# flush (clean) raw table
iptables -t raw -F

# delete a specific rule from a table by line number
sudo iptables -t raw -D INPUT 2

# list rules
iptables --list-rules

# list by specifications
iptables -S

; ----------------------------------------------------------------------------
% xdg [linux]

# copy file contents to the clipboard
xclip -selection clipboard < ~/.ssh/id_rsa.pub

; ----------------------------------------------------------------------------
% neomutt [mutt, email]

# read an mbox file
neomutt -f all.mbox

; ----------------------------------------------------------------------------
% direnv [env, security]

# get status
direnv status

; ----------------------------------------------------------------------------
% git-crypt [git, security]

# lock repository
git-crypt lock

# unlock repository
git-crypt unlock

# list encrypted files
git-crypt status -e

; ----------------------------------------------------------------------------
% grep [unix]

# get count of the query in files
grep -c '<query>' *txt

; ----------------------------------------------------------------------------
% ps [unix]

# get process by name
ps -aux | grep <program_name> | grep -v grep

# kill all zombie processes
ps -ef | grep defunct | grep -v grep | awk '{ print $2 }' | xargs kill -9

; ----------------------------------------------------------------------------
% apropos [unix]

# find command by query
apropos <query>

; ----------------------------------------------------------------------------
% date [unix]

# get date with a format
date +'%Y-%m-%dT%H:%M:%S'

; ----------------------------------------------------------------------------
% base64 [unix]

# encode file to base64
base64 <file>

# decode file to base64
base64 --decode <file>

# wrap lines, don't multiline
base64 -w0 <file>

; ----------------------------------------------------------------------------
% lxc [linux]

# list containers
lxc-ls --fancy

# start container
lxc-start -n <container>

# stop container
lxc-stop -n <container>

# get inside of container by name
lxc-attach -n <container>

# run command inside of container by name
lxc-attach -n <container> -- ls

; ----------------------------------------------------------------------------
% proc [linux]

# get memory information
cat /proc/meminfo

# get kernel version
cat /proc/version

# get process environment variables
cat /proc/<pid>/environ | tr "\0" "\n"

# get process command line
cat /proc/<pid>/cmdline | tr "\0" "\n"

# get process link to the working directory
file /proc/<pid>/cwd

# get process file descriptors
ls -l /proc/<pid>/fd

# get process binary
file /proc/<pid>/exe

# get process limits
cat /proc/<pid>/limits

; ----------------------------------------------------------------------------
% kubectl [k8s]

# get all pods with labels
kubectl get pods --show-labels -A

# get logs by label
kubectl logs -n <namespace> -l key=value --follow

# describe pod by label
kubectl describe pod -n <namespace> -l key=value

# exec into pod by name
kubectl exec -n <namespace> --stdin --tty <pod_name> -- /bin/bash

# exec into pod and container by names
kubectl exec -n <namespace> --stdin --tty <pod_name> -c <container_name> -- /bin/bash

; ----------------------------------------------------------------------------
% misc

# write into file with sudo tee
echo "text" | sudo tee <file>

# run while loop forever
while true; do echo 'hello'; sleep 1; done

# create process with custom name
/bin/sh -c 'exec -a my_custom_process -- sleep 60'
