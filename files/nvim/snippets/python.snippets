snippet assert "assert isinstance(x, type)"
assert isinstance(${1:x}, ${1:type})
endsnippet

snippet doc "docstring (reStructured Text style)"
"""
${1:<<Description>>}

:param ${2:<<param>>} ${3:<<type>>}: ${4:<<description>>}
:returns: this is a description of what is returned
:raises keyError: raises an exception
"""
endsnippet

snippet main "main boilerplate"
def main():
	pass

if __name__ == "__main__":
	main()
endsnippet

snippet breakpoint "breakpoint (Python 3.7+)"
breakpoint()
endsnippet

snippet pdb "breakpoint (legacy)"
import pdb; pdb.set_trace()
endsnippet

snippet unittest "unittest skeleton" b
import unittest

# ${0:testcases}

if __name__ == "__main__":
	unittest.main()
endsnippet

snippet unittest_testcase "unittest.TestCase" b
class Test${1:Name}(unittest.TestCase):

	def setUp(self):
		pass

	def addCleanup(self):
		pass

	def test_pass(self):
		self.assertEqual(1, 1)

	def test_failure(self):
		with self.assertRaisesRegex(ValueError, "invalid literal"):
			int("a")
endsnippet

snippet fordict "for loop dict" b
for key, value in dict.items():
	print(key, value)
endsnippet

snippet lstif "list comprehension if"
[${2:if_true} for xi in x if ${1:condition}]
endsnippet

snippet lstifelse "list comprehension if else"
[${2:if_true} if ${1:condition} else ${3:if_false} for xi in x]
endsnippet

snippet logging
import logging
log = logging.getLogger(__name__)
endsnippet

snippet subprocess
process = subprocess.Popen(${1:cmd_list}, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
stdout, stderr = process.communicate()
exit_code = process.wait()
out = (exit_code, stdout, stderr)
endsnippet
