# RStudio snippets
# https://support.rstudio.com/hc/en-us/articles/204463668-Code-Snippets

# BASE
snippet lib
	library(${0})

snippet req
	require("${1:package}")

snippet src
	source("${1:file.R}")

snippet ifelse
	ifelse(${1:condition}, ${2:yes}, ${3:no})

snippet fun
	${1:name} <- function(${2:vars}) {
		${0}
	}

snippet for
	for (${1:var} in ${2:range}) {
		${0}
	}

snippet while
	while (${1:condition}) {
		${0}
	}

snippet switch
	switch (${1:obj},
		"${2:case}" = ${3:action}
	)

snippet apply
	apply(${1:array}, ${2:margin}, ${3:...})

snippet lapply
	lapply(${1:list}, ${2:function})

snippet sapply
	sapply(${1:list}, ${2:function})

snippet mapply
	mapply(${1:function}, ${2:...})

snippet tapply
	tapply(${1:vector}, ${2:index}, ${3:function})

snippet vapply
	vapply(${1:list}, ${2:function}, FUN.VALUE = ${3:type}, ${4:...})

snippet rapply
	rapply(${1:list}, ${2:function})

snippet do.call
	do.call(${1:function}, list(${2:list}))

snippet tryCatch
	tryCatch({
	  ${0}
	},
	error = function(e) {
	  paste("Error: ", conditionMessage(e))
	},
	warning = function(w) {
	  paste("Warning: ", conditionMessage(w))
	},
	finally = {
	  # (optional) expression to be evaluated before returning or exiting.
	})

# S3 OBJECT SYSTEM
snippet generic
	${1:name} <- function(${2:arg}) {
		UseMethod("${1:name}")
	}

# S4 OBJECT SYSTEM
snippet setGeneric
	setGeneric("${1:generic}", function(${2:x, ...}) {
		standardGeneric("${1:generic}")
	})

snippet setMethod
	setMethod("${1:generic}", ${2:class}, function(${2:x, ...}) {
		${0}
	})

snippet setClass
	setClass("${1:Class}", slots = c(${2:name = "type"}))

# R6 OBJECT SYSTEM
snippet R6Class
	${1:name} <- R6::R6Class(
		"${1:name}",
		var = NULL,
		public = list(
			initialize = function(var) {
			},
			print = function(...) {
				print(paste("class print method"))
			},
			${2:function} = function(x) {
				${0}
			}
		),
		private = NULL
	)

# STATS
snippet matrix
	matrix(${1:data}, nrow = ${2:rows}, ncol = ${3:cols})

# MISCELLANEOUS
snippet apr
	apropos("${1:name}")

snippet help
	help(package="${1:pkgname}")

snippet ts
	`r paste("#", date(), "------------------------------\n")`

snippet header
	`r paste("###", paste(rep("-", 65), collapse = ""), "###")`
	`r paste("###")` ${1:TITLE} ----
	`r paste("###", paste(rep("-", 65), collapse = ""), "###")`
	${0}

# SHINY
snippet shinyapp
	library(shiny)

	ui <- fluidPage(
	  ${0}
	)

	server <- function(input, output, session) {

	}

	shinyApp(ui, server)

snippet shinymodule
	${1:name}_ui <- function(id) {
	  ns <- shiny::NS(id)
	  shiny::tagList(
	  	${2}
	  )
	}

	${1:name}_server <- function(input, output, session) {

	}

## NB this is a printf-style debugging esp. useful with input vals
snippet observe
	observe(print(paste("${1:object}:", ${1:object})))${0}

snippet validate
	shiny::validate(
		shiny::need(${1:input}, "Please choose a state."),
	)

snippet callModule
	callModule(module = ${1:module_server},
		id = "${2:ui_id}",
		${0})

# DEBUGGING
snippet dbo
	debugonce(${0})

snippet tb
	traceback()

snippet trce
	trace(${0}, edit = TRUE)

snippet trcr
	trace(${0}, recover)

snippet trcb
	trace(${0}, browser)

snippet trcba
	trace(${1:function}, browser, ${2:at})

snippet trcun
	untrace(${0})

snippet brow
	browser()

# find options
snippet optionsf
	names(options())[grep("${1:regex}", names(options()))]

snippet optionsr
	options(error=recover)

snippet optionsn
	options(error=NULL)

snippet optionsw
	options(warn=2)

# DEVTOOLS
snippet test
	devtools::test()

snippet build
	devtools::build()

snippet document
	devtools::document()

# TESTING
snippet test_that
	test_that("${1:message}", { ${0} })

## NB put dput in editor (e.g. type `$$head(mtcars)` then press TAB - be sure
## the cursor is at the end of the line.)
## Source: https://gitlab.com/jozefhajnala/gists/tree/master
snippet $$
	`r deparse(eval(parse(text="$$")), width.cutoff = 500L)`
